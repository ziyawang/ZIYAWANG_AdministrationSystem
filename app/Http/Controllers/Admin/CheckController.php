<?phpnamespace App\Http\Controllers\Admin;use Illuminate\Http\Request;use App\Http\Requests;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\DB;use Illuminate\Support\Facades\Input;use Illuminate\Support\Facades\Redirect;class CheckController extends Controller{   //审核信息展示    public function index(){        if (isset($_POST['_token'])) {            $state = $_POST['state'];            $typeName = $_POST['typeName'];            $member=$_POST['member'];           // $CooperateState=$_POST['CooperateState'];            $projectId=!empty($_POST['projectId']) ? $_POST['projectId'] : "";            $projectIdWhere=!empty($_POST['projectId']) ? array("T_P_PROJECTINFO.ProjectID"=>$projectId) : array();           // $projectId=$_POST['CooperateState']!=3 ? $_POST['CooperateState'] : "";           // $projectIdWhere=$_POST['CooperateState']!=3 ? array("T_P_PROJECTINFO.CooperateState"=>$projectId) : array();            $phoneNumber = !empty($_POST['phoneNumber']) ? $_POST['phoneNumber'] : "";            $province = $_POST['province'];            $provinceWhere = $_POST['province'] != "全国" ? array("ProArea" => $province) : array();            $typeNameWhere = $_POST['typeName'] != 0 ? array("T_P_PROJECTINFO.TypeID" => $typeName) : array();            if($_POST['typeName'] != 0 ){                $typeNameWhere=explode(",",$_POST['typeName']);            }else{                $typeNameWhere=array(1,6,12,16,17,18,19,20,21,22);            }            $stateWhere = $_POST['state'] != 3 ? array("T_P_PROJECTCERTIFY.State" => $state) : array();            $memberWhere=$_POST['member']!=3 ? array("T_P_PROJECTINFO.member"=>$member) : array();            if ($_POST['province'] != "全国") {                if (!empty($_POST['phoneNumber'])) {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*","users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($projectIdWhere)                        ->where($stateWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total=DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*","users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($projectIdWhere)                        ->where($stateWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                } else {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($projectIdWhere)                        ->where($stateWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($projectIdWhere)                        ->where($stateWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                }            } else {                if (!empty($_POST['phoneNumber'])) {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->where($stateWhere)                        ->where($projectIdWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->where($stateWhere)                        ->where($projectIdWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                } else {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($projectIdWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($projectIdWhere)                        ->where($memberWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                }            }            $number=$total;            foreach ($datas as $data){                $channel=$data->Channel;                switch($channel){                    case "PC":                        $data->Channel="电脑";                        break;                    case "IOS":                        $data->Channel="苹果";                        break;                    case "ANDROID":                        $data->Channel="安卓";                        break;                }                $projectId=$data->ProjectID;                $data->number=$number;                $counts=DB::table("T_P_RUSHPROJECT")->where("ProjectID",$projectId)->where("CooperateFlag",0)->count();                $data->counts=$counts;                $number--;            }            $projectId=!empty($_POST['projectId']) ? $_POST['projectId'] : "";            $results = DB::table("T_P_PROJECTTYPE")->whereIn("TypeId",[1,6,12,16,17,18,19,20,21,22])->get();            return view("members/check/index", compact("datas", "results", "state", "typeName", "province", "phoneNumber","member","projectId"));        }        if (!empty($_GET)) {            $state = $_GET['state'];            $typeName = $_GET['typeName'];            $member=$_GET['member'];           // $CooperateState=$_GET['CooperateState'];            $phoneNumber = !empty($_GET['phoneNumber']) ? $_GET['phoneNumber'] : "";            $province = $_GET['province'];            // $provinceWhere=$_POST['province']!="全国" ? array("ProArea"=>$province) : array();           /* $typeNameWhere = $_GET['typeName'] != 0 ? array("T_P_PROJECTINFO.TypeID" => $typeName) : array();*/            if($_GET['typeName'] != 0 ){                $typeNameWhere=explode(",",$_GET['typeName']);            }else{                $typeNameWhere=array(1,6,12,16,17,18,19,20,21,22);            }            $stateWhere = $_GET['state'] != 3 ? array("T_P_PROJECTCERTIFY.State" => $state) : array();           // $CooperateStateWhere=$_GET['member']!=3 ? array("T_P_PROJECTINFO.CooperateState"=>$CooperateState) : array();            $memberWhere=$_GET['member']!=3 ? array("T_P_PROJECTINFO.member"=>$member) : array();            if ($_GET['province'] != "全国") {                if (!empty($_GET['phoneNumber'])) {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                      //  ->where($CooperateStateWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                       // ->where($CooperateStateWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                } else {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                       // ->where($CooperateStateWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->where("ProArea", "like", "%" . $province . "%")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                      //  ->where($CooperateStateWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                }            } else {                if (!empty($_GET['phoneNumber'])) {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                       // ->where($CooperateStateWhere)                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                       // ->where($CooperateStateWhere)                        ->where("users.phonenumber", "like", "%" . $phoneNumber . "%")                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                } else {                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                      //  ->where($CooperateStateWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);                    $total = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")                        ->whereIn("T_P_PROJECTINFO.TypeId",$typeNameWhere)                        ->where($stateWhere)                        ->where($memberWhere)                      //  ->where($CooperateStateWhere)                        ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])                        ->count();                }            }            $number=$total-20*($_GET['page']-1);            foreach ($datas as $data){                $channel=$data->Channel;                switch($channel){                    case "PC":                        $data->Channel="电脑";                        break;                    case "IOS":                        $data->Channel="苹果";                        break;                    case "ANDROID":                        $data->Channel="安卓";                        break;                }                $projectId=$data->ProjectID;                $data->number=$number;                $counts=DB::table("T_P_RUSHPROJECT")->where("ProjectID",$projectId)->where("CooperateFlag",0)->count();                $data->counts=$counts;                $number--;            }            $results = DB::table("T_P_PROJECTTYPE")->whereIn("TypeId",[1,6,12,16,17,18,19,20,21,22])->get();            return view("members/check/index", compact("datas", "results", "state", "typeName", "province", "phoneNumber","member"));        }        $state = 3;        $typeName = 0;        $province = "全国";        $phoneNumber = "";        $member=3;      //  $CooperateState=3;        $typeIds=array(1,6,12,16,17,18,19,20,21,22);        $datas = DB::table("T_P_PROJECTINFO")            ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")            ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")            ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")            ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")            ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])            ->whereIn("T_P_PROJECTINFO.TypeId",$typeIds)            ->orderBy("T_P_PROJECTINFO.ProjectID", "desc")->paginate(20);        $total = DB::table("T_P_PROJECTINFO")            ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")            ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")            ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")            ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State", "T_P_PROJECTTYPE.TypeID","users.userid")            ->whereIn("T_P_PROJECTINFO.CertifyState",[0,1,2])            ->whereIn("T_P_PROJECTINFO.TypeId",$typeIds)            ->count();        $number=$total;        foreach ($datas as $data){            $channel=$data->Channel;            switch($channel){                case "PC":                    $data->Channel="电脑";                    break;                case "IOS":                    $data->Channel="苹果";                    break;                case "ANDROID":                    $data->Channel="安卓";                    break;            }            $projectId=$data->ProjectID;            $data->number=$number;            $counts=DB::table("T_P_RUSHPROJECT")->where("ProjectID",$projectId)->where("CooperateFlag",0)->count();            $data->counts=$counts;            $number--;        }        $results = DB::table("T_P_PROJECTTYPE")->whereIn("TypeId",$typeIds)->get();        return view("members/check/index", compact("datas", "results", "state", "typeName", "province", "phoneNumber","member"));    }    //审核信息详情   public function detail($id, $typeId)    {        session(["url"=>$_SERVER["HTTP_REFERER"]]);        switch ($typeId) {            case "1":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC01", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC01.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC01.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                foreach($datas as $data){                    if(!empty($data->Pawn)){                        $pawnStr=$data->Pawn;                        $pawn=explode(",",$pawnStr);                    }                    $proLabel=$data->ProLabel;                    $proLabels=explode(",",$proLabel);                    $proArea=$data->ProArea;                    $res=mb_strpos($proArea,"-");                    if($res){                        $result=mb_substr($proArea,0,$res);                        $data->ProArea=$result;                    }                    if(!empty($data->Time)){                        $times=$data->Time;                        $res1=mb_strpos($times,"年");                        $year=mb_substr($times,0,$res1);                        $res2=mb_strpos($times,"月");                        $month=mb_substr($times,$res1+1,$res2-$res1-1);                        $res3=mb_strpos($times,"日");                        $day=mb_substr($times,$res2+1,$res3-$res2-1);                        $data->Time=$year."-".$month."-".$day;                    }                }                return view("members/check/detail", compact('datas', "id","pawn","proLabels","year","month","day","typeId"));                break;            case "2":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC02", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC02.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC02.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();               // dd($datas);                return view("members/check/releaseinfo_1", compact('datas', "id","typeId"));                break;            case "3":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC03", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC03.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC03.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                return view("members/check/releaseinfo_2", compact('datas', "id","typeId"));                break;            case "4":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC04", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC04.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC04.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                //dd($datas);                return view("members/check/releaseinfo_3", compact('datas', "id","typeId"));                break;            case "5":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC05", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC05.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC05.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                return view("members/check/releaseinfo_4", compact('datas', "id","typeId"));                break;            case "6":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC06", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC06.ProjectID")                    ->select("T_P_PROJECTINFO.*","users.phonenumber","T_P_PROJECTTYPE.TypeName", "T_P_SPEC06.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                foreach($datas as $data){                    $proLabel=$data->ProLabel;                    $proLabels=explode(",",$proLabel);                }                return view("members/check/releaseinfo_5", compact('datas', "id","typeId","proLabels"));                break;            case "9":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC09", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC09.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC09.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                return view("members/check/releaseinfo_6", compact('datas', "id","typeId"));                break;            case "10":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC10", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC10.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC10.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                return view("members/check/releaseinfo_7", compact('datas', "id","typeId"));                break;            case "12":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC12", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC12.ProjectID")                    ->select("T_P_PROJECTINFO.*","T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC12.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                foreach($datas as $data){                    $proLabel=$data->ProLabel;                    $proLabels=explode(",",$proLabel);                }                return view("members/check/releaseinfo_8", compact('datas', "id","typeId","proLabels"));                break;            case "13":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC13", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC13.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC13.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    return view("members/check/releaseinfo_9", compact('datas', "id","typeId"));                break;            case "14":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC14", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC14.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC14.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    return view("members/check/releaseinfo_10", compact('datas', "id","typeId"));                break;            case "15":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC15", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC15.ProjectID")                        ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_SPEC15.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    return view("members/check/releaseinfo_11", compact('datas', "id","typeId"));                break;            case "16":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC16", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC16.ProjectID")                        ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC16.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    foreach($datas as $data){                        $proLabel=$data->ProLabel;                        $proLabels=explode(",",$proLabel);                    }                    return view("members/check/releaseinfo_16", compact('datas', "id","typeId","proLabels"));                break;            case "17":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC17", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC17.ProjectID")                        ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC17.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    foreach($datas as $data){                        $proLabel=$data->ProLabel;                        $proLabels=explode(",",$proLabel);                    }                    return view("members/check/releaseinfo_17", compact('datas', "id","typeId","proLabels"));                break;            case "18":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC18", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC18.ProjectID")                    ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC18.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                foreach($datas as $data){                    $proLabel=$data->ProLabel;                    $proLabels=explode(",",$proLabel);                }                return view("members/check/releaseinfo_18", compact('datas', "id","typeId","proLabels"));                break;            case "19":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC19", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC19.ProjectID")                        ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC19.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    foreach($datas as $data){                        $proLabel=$data->ProLabel;                        $proLabels=explode(",",$proLabel);                    }                    return view("members/check/releaseinfo_19", compact('datas', "id","typeId","proLabels"));                break;            case "20":                    $datas = DB::table("T_P_PROJECTINFO")                        ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                        ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                        ->leftJoin("T_P_SPEC20", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC20.ProjectID")                        ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName", "users.phonenumber","T_P_SPEC20.*")                        ->where("T_P_PROJECTINFO.ProjectID", $id)                        ->get();                    foreach($datas as $data){                        $proLabel=$data->ProLabel;                        $proLabels=explode(",",$proLabel);                    }                    return view("members/check/releaseinfo_20", compact('datas', "id","typeId","proLabels"));                break;            case "21":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC21", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC21.ProjectID")                    ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC21.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                foreach($datas as $data){                    $proLabel=$data->ProLabel;                    $proLabels=explode(",",$proLabel);                }                return view("members/check/releaseinfo_21", compact('datas', "id","typeId","proLabels"));                break;            case "22":                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftJoin("T_P_SPEC22", "T_P_PROJECTINFO.ProjectID", "=", "T_P_SPEC22.ProjectID")                    ->select("T_P_PROJECTINFO.*", "T_P_PROJECTTYPE.TypeName","users.phonenumber", "T_P_SPEC22.*")                    ->where("T_P_PROJECTINFO.ProjectID", $id)                    ->get();                foreach($datas as $data){                    $proLabel=$data->ProLabel;                    $proLabels=explode(",",$proLabel);                }                return view("members/check/releaseinfo_22", compact('datas', "id","typeId","proLabels"));                break;        }    }    //导出    public function export()    {        set_time_limit(0);        ini_set('memory_limit', '512M');        $state = $_GET['state'];        $typeName = $_GET['type'];        $province = $_GET['province'];        $member=$_GET['member'];        $phoneNumber = $_GET['phoneNumber'];      /*  $typeNameWhere = $_GET['type'] != 0 ? array("T_P_PROJECTINFO.TypeID" => $typeName) : array();*/        $stateWhere = $_GET['state'] != 3 ? array("T_P_PROJECTCERTIFY.State" => $state) : array();        $memberWhere=$_GET['member']!=3 ? array("T_P_PROJECTINFO.member"=>$member) : array();        if($typeName != 0 ){            $typeNameWhere=explode(",",$typeName);        }else{            $typeNameWhere=array(1,6,12,16,17,18,19,20,21,22);        }        if (!empty($phoneNumber)) {            if(!empty($province) && $province!="全国"){                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State")                    ->where("users.phonenumber", "like", "%".$phoneNumber."%")                    ->where("T_P_PROJECTINFO.ProArea", "like", "%".$province ."%")                    ->whereIn("T_P_PROJECTINFO.TypeID",$typeNameWhere)                    ->where($stateWhere)                    ->where($memberWhere)                    ->whereNotIn("CertifyState", [3,4])                    ->get();            }else{                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State")                    ->where("users.phonenumber", "like", "%".$phoneNumber."%")                    ->whereIn("T_P_PROJECTINFO.TypeID",$typeNameWhere)                    ->where($stateWhere)                    ->where($memberWhere)                    ->whereNotIn("CertifyState", [3,4])                    ->get();            }        } else {            if(!empty($province) && $province!="全国"){                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State")                    ->where("T_P_PROJECTINFO.ProArea", "like", "%".$province ."%")                    ->whereIn("T_P_PROJECTINFO.TypeID",$typeNameWhere)                    ->where($stateWhere)                    ->where($memberWhere)                    ->whereNotIn("CertifyState", [3,4])                    ->get();            }else{                $datas = DB::table("T_P_PROJECTINFO")                    ->leftjoin("users", "T_P_PROJECTINFO.UserID", "=", "users.userid")                    ->leftjoin("T_P_PROJECTTYPE", "T_P_PROJECTINFO.TypeID", "=", "T_P_PROJECTTYPE.TypeID")                    ->leftjoin("T_P_PROJECTCERTIFY", "T_P_PROJECTCERTIFY.ProjectID", "=", "T_P_PROJECTINFO.ProjectID")                    ->select("T_P_PROJECTINFO.*", "users.phonenumber", "T_P_PROJECTTYPE.TypeName", "T_P_PROJECTCERTIFY.Remark", "T_P_PROJECTCERTIFY.State")                    ->whereIn("T_P_PROJECTINFO.TypeID",$typeNameWhere)                    ->where($stateWhere)                    ->where($memberWhere)                    ->whereNotIn("CertifyState", [3,4])                    ->get();            }        }        foreach ($datas as $data){            $channel=$data->Channel;            switch($channel){                case "PC":                    $data->Channel="电脑";                    break;                case "IOS":                    $data->Channel="苹果";                    break;                case "ANDROID":                    $data->Channel="安卓";                    break;            }            $projectId=$data->ProjectID;            $counts=DB::table("T_P_RUSHPROJECT")->where("ProjectID",$projectId)->where("CooperateFlag",0)->count();            $data->counts=$counts;        }        require_once '../vendor/PHPExcel.class.php';        require_once '../vendor/PHPExcel/IOFactory.php';        require_once '../vendor/PHPExcel/Reader/Excel5.php';        $phpExcel = new \PHPExcel();        //var_dump($phpExcel);die;        $excel_name = '资芽网审核发布信息' . date("Y-m-d", time());        $phpExcel->setActiveSheetIndex(0);        $phpExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15);        $phpExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);        $phpExcel->setActiveSheetIndex(0)            ->setCellValue('A1', '注册号')            ->setCellValue('B1', '联系方式')            ->setCellValue('C1', '发布时间')            ->setCellValue('D1', '地址')            ->setCellValue('E1', '信息类型')            ->setCellValue('F1', '浏览次数')            ->setCellValue('G1', '收藏次数')            ->setCellValue('H1', '约谈次数')            ->setCellValue('I1', '发布渠道')            ->setCellValue('J1', '审核状态')            ->setCellValue('K1', '信息编号');          /*  ->setCellValue('I1', '类型')            ->setCellValue('J1', '标的物')            ->setCellValue('K1', '转让价')            ->setCellValue('L1', '详情描述');*/        foreach ($datas as $key => $data) {            if ($data->State == 0) {                $status = "待审核";            } elseif ($data->State == 1) {                $status = "已审核";            } else {                $status = "拒审核";            }            $i = $key + 2;            $phpExcel->setActiveSheetIndex(0)                ->setCellValue('A' . $i, "'" . $data->phonenumber)                ->setCellValue('B' . $i, "'" . $data->ConnectPhone)                ->setCellValue('C' . $i, $data->PublishTime)                ->setCellValue('D' . $i, $data->ProArea)                ->setCellValue('E' . $i, $data->TypeName)                ->setCellValue('F' . $i, $data->ViewCount)                ->setCellValue('G' . $i, $data->CollectionCount)                ->setCellValue('H' . $i, $data->counts)                ->setCellValue('I' . $i, $data->Channel)                ->setCellValue('J' . $i, $status)                ->setCellValue('K' . $i, $data->ProjectID);               /* ->setCellValue('I' . $i, $data->AssetType)                ->setCellValue('J' . $i, $data->Corpore)                ->setCellValue('K' . $i, $data->TransferMoney)                ->setCellValue('L' . $i, $data->WordDes);*/        }        $objWriter = \PHPExcel_IOFactory::createWriter($phpExcel, 'Excel5');        header("Pragma: public");        header("Expires: 0");        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");        header("Content-Type:application/force-download");        header("Content-Type:application/vnd.ms-execl");        header("Content-Type:application/octet-stream");        header("Content-Type:application/download");        header('Content-Disposition:attachment;filename=' . $excel_name . ".xls");        header("Content-Transfer-Encoding:binary");        $objWriter->save('php://output');    }    //编辑信息详情    public function update(){        if($_POST['state']==3){           $rushCounts=DB::table("T_P_RUSHPROJECT")->where("CooperateFlag","<>","3")->where("ProjectID",$_POST['id'])->count();           $collectCounts=DB::table("T_P_COLLECTION")->where("Type",1)->where("ItemID",$_POST['id'])->count();            if($rushCounts!=0){                $resultCounts=DB::table("T_P_RUSHPROJECT")->where("CooperateFlag","<>","3")->where("ProjectID",$_POST['id'])->get();                foreach($resultCounts as $resultCount){                   DB::table("T_P_RUSHPROJECT")->where("RushProID",$resultCount->RushProID)->update([                       "CooperateFlag"=>3                   ]);                }            }            if($collectCounts!=0){                DB::table("T_P_COLLECTION")->where("Type",1)->where("ItemID",$_POST['id'])->delete();            }       }        $typeId=$_POST['typeId'];        if(!in_array($typeId,array(20,21,22))){            $memberTypeId="".$typeId."";            $projectIdMems=DB::table("T_P_PROJECTINFO")->select("CertifyState")->where("ProjectID",$_POST['id'])->get();            foreach($projectIdMems as $projectIdMem){                $certifyMemId=$projectIdMem->CertifyState;            }            $memberTypeArr=array("1"=>[1,2],"6"=>[3,4],"17"=>[3,4],"12"=>[5,6],"16"=>[5,6],"18"=>[9,10],"19"=>[7,8]);            $members=DB::table("T_U_MEMBER") ->select("UserID")->whereIn("MemberID",$memberTypeArr[$memberTypeId])->where("PayFlag",1)->where("Over",0)->get();            if($_POST['state']==1 && $_POST['state']!=$certifyMemId  && $_POST['member']==1){                $textId=DB::table("T_M_MESSAGETEXT")->insertGetId([                    "Title"=>"您有新的会员消息",                    "TEXT"=>"平台最近发布了一条符合您所办会员的信息,请您点击<a href='Http://ziyawang.com/project/".$typeId."/".$_POST['id']."'>Http://ziyawang.com/project/".$typeId."/".$_POST['id']."</a>查看",                    "Time"=>date("Y-m-d H:m:s",time()),                ]);                foreach ($members as $member){                    $memberId=$member->UserID;                    $counts=DB::table("T_M_MESSAGE")->where("TextID",$textId)->where("RecID",$memberId)->count();                    if($counts==0){                        $messageMeb=DB::table("T_M_MESSAGE")->insert([                            "SendID"=>0,                            "RecID"=>$memberId,                            "TextID"=>$textId,                            "Status"=>0,                            "created_at"=>date("Y-m-d H:m:s",time()),                        ]);                    }                }            }        }        $typeArr=array(2,3,4,5,9,10,13,14,15);        if(in_array($typeId,$typeArr)){            $db = DB::table("T_P_PROJECTINFO")->where("T_P_PROJECTINFO.ProjectID", $_POST['id'])                ->update([                    "CertifyState" => $_POST['state'],                    "Member" => $_POST['member'],                    "Price"=>$_POST['gold'],                    "Publisher"=>$_POST['publisher'],                    "WordDes"=>$_POST['wordDes'],                    "CompanyDes"=>$_POST['companyDes'],                    "PublishState"=>$_POST['togetherType'],                    'updated_at' => date("Y-m-d H:i:s", time())                ]);        }else{            if($_POST['state']==1){                if(empty($_POST['Title'])){                    return back()->with("msg","请将信息标题填写完整");                }            }            $ProLabels=!empty($_POST['ProLabel']) ? $_POST['ProLabel'] : "" ;            if(!empty($ProLabels)){                $proLabel=implode(",",$ProLabels);            }else{                $proLabel="";            }            if(empty($_POST['PictureDes1'])){                if(!empty($_POST['PictureDes2'])){                    $PictureDes1=$_POST['PictureDes2'];                    $_POST['PictureDes2']="";                }else if(!empty($_POST['PictureDes3'])){                    $PictureDes1=$_POST['PictureDes3'];                    $_POST['PictureDes3']="";                }else{                    $PictureDes1=$_POST['PictureDes4'];                    $_POST['PictureDes4']="";                }            }            $db = DB::table("T_P_PROJECTINFO")->where("T_P_PROJECTINFO.ProjectID", $_POST['id'])                ->update([                    "CertifyState" => $_POST['state'],                    "ProArea"=>$_POST['ProArea'],                    "Title"=>!empty($_POST['Title']) ? $_POST['Title'] : "",                    "PictureDes1"=>!empty($_POST['PictureDes1']) ? $_POST['PictureDes1'] : $PictureDes1,                    "PictureDes2"=>!empty($_POST['PictureDes2']) ? $_POST['PictureDes2'] : "",                    "PictureDes3"=>!empty($_POST['PictureDes3']) ? $_POST['PictureDes3'] : "",                    "PictureDes4"=>!empty($_POST['PictureDes4']) ? $_POST['PictureDes4'] : "",                    "PictureDes5"=>!empty($_POST['PictureDes5']) ? $_POST['PictureDes5'] : "",                   // "PictureDet"=>!empty($_POST['PictureDet']) ? $_POST['PictureDet'] : "",                    "PictureDet1"=>!empty($_POST['PictureDet1']) ? $_POST['PictureDet1'] : "",                    "PictureDet2"=>!empty($_POST['PictureDet2']) ? $_POST['PictureDet2'] : "",                    "ConnectPerson"=>!empty($_POST['ConnectPerson']) ? $_POST['ConnectPerson'] : "",                    "ConnectPhone"=>!empty($_POST['ConnectPhone']) ? $_POST['ConnectPhone'] : "",                    "ProLabel"=>$proLabel,                    "Member" => $_POST['member'],                    "Price"=>$_POST['gold'],                    "Publisher"=>$_POST['publisher'],                    "WordDes"=>$_POST['wordDes'],                    "CompanyDes"=>$_POST['companyDes'],                   /* "PublishState"=>$_POST['togetherType'],*/                    "CooperateState"=>$_POST['cooperateState'],                    'updated_at' => date("Y-m-d H:i:s", time())                ]);            switch($typeId){                case "1":                   /* $pawns=!empty($_POST['Pawn']) ? $_POST['Pawn'] : "";                    if(!empty($pawns)){                        $pawn=implode(",",$pawns);                    }else{                        $pawn="";                    }*/                    $res=DB::table("T_P_SPEC01")->where("ProjectID",$_POST['id'])->update([                        "Identity"=>!empty($_POST['Identity']) ? $_POST['Identity'] : "",                        "FromWhere"=>$_POST['FromWhere'],                        "TotalMoney"=>$_POST['TotalMoney'],                       "TransferMoney"=>$_POST['TransferMoney'],                        "AssetType"=>$_POST['AssetType'],                        "Money"=>!empty($_POST['Money']) ? $_POST['Money'] : "",                        "Rate"=>!empty($_POST['Rate']) ? $_POST['Rate'] : "",                       /* "Counts"=>!empty($_POST['Counts']) ? $_POST['Counts'] : "",*/                      /*  "Report"=>!empty($_POST['Report']) ? $_POST['Report'] : "",*/                       /* "Pawn"=>$pawn,*/                    ]);                    break;                case "6":                    $res=DB::table("T_P_SPEC06")->where("ProjectID",$_POST['id'])->update([                        "Identity"=>!empty($_POST['Identity']) ? $_POST['Identity'] : "",                        "AssetType"=>$_POST['AssetType'],                        "TotalMoney"=>$_POST['TotalMoney'],                        "Rate"=>$_POST['Rate'],                        "Status"=>!empty($_POST['Status']) ? $_POST['Status'] : "",                        "Belong"=>!empty($_POST['Belong']) ? $_POST['Belong'] : "",                        "Usefor"=>!empty($_POST['Usefor']) ? $_POST['Usefor'] : "",                    ]);                    break;                case "12":                    $res=DB::table("T_P_SPEC12")->where("ProjectID",$_POST['id'])->update([                        "Identity"=>isset($_POST['Identity']) ? $_POST['Identity'] : "",                        "AssetType"=> $_POST['AssetType'],                        "TransferMoney"=> $_POST['TransferMoney'],                        "Type"=>!empty($_POST['Type']) ? $_POST['Type'] : "",                        "Usefor"=>isset($_POST['Usefor']) ? $_POST['Usefor'] : "",                        "Area"=>!empty($_POST['Area']) ? $_POST['Area'] : "",                        "Year"=>isset($_POST['Year']) ? $_POST['Year'] : "",                        "TransferType"=>isset($_POST['TransferType']) ? $_POST['TransferType'] : "",                        "MarketPrice"=>!empty($_POST['MarketPrice']) ? $_POST['MarketPrice'] : "",                       /* "Credentials"=>!isset($_POST['Credentials']) ? $_POST['Credentials'] : "",                        "Dispute"=>!empty($_POST['Dispute']) ? $_POST['Dispute'] : "",                        "Debt"=>!empty($_POST['Debt']) ? $_POST['Debt'] : "",                        "Guaranty"=>!empty($_POST['Guaranty']) ? $_POST['Guaranty'] : "",                        "Property"=>!empty($_POST['Property']) ? $_POST['Property'] : "",*/                    ]);                    break;                case "16":                    $res=DB::table("T_P_SPEC16")->where("ProjectID",$_POST['id'])->update([                        "Identity"=>isset($_POST['Identity']) ? $_POST['Identity'] : "",                        "AssetType"=> $_POST['AssetType'],                        "TransferMoney"=> $_POST['TransferMoney'],                        "Usefor"=>!empty($_POST['Usefor']) ? $_POST['Usefor'] : "",                        "Area"=>!empty($_POST['Area']) ? $_POST['Area'] : "",                        "BuildArea"=>!empty($_POST['buildArea']) ? $_POST['buildArea'] : "",                        "FloorRatio"=>!empty($_POST['floorRatio']) ? $_POST['floorRatio'] : "",                        "Year"=>isset($_POST['Year']) ? $_POST['Year'] : "",                        "TransferType"=>isset($_POST['TransferType']) ? $_POST['TransferType'] : "",                       /* "Credentials"=>!empty($_POST['Credentials']) ? $_POST['Credentials'] : "",                        "Dispute"=>!empty($_POST['Dispute']) ? $_POST['Dispute'] : "",                        "Debt"=>!empty($_POST['Debt']) ? $_POST['Debt'] : "",                        "Guaranty"=>!empty($_POST['Guaranty']) ? $_POST['Guaranty'] : "",                        "Property"=>!empty($_POST['Property']) ? $_POST['Property'] : "",*/                    ]);                    break;                case "17":                        $res=DB::table("T_P_SPEC17")->where("ProjectID",$_POST['id'])->update([                            "Identity"=>isset($_POST['Identity']) ? $_POST['Identity'] : "",                            "AssetType"=>$_POST['AssetType'],                            "Money"=>$_POST['Money'],                            "Month"=>$_POST['Month'],                            "Type"=>$_POST['Type'],                    ]);                    break;                case "18":                    $res=DB::table("T_P_SPEC18")->where("ProjectID",$_POST['id'])->update([                        "Identity"=>isset($_POST['Identity']) ? $_POST['Identity'] : "",                        "AssetType"=>$_POST['AssetType'],                        "Money"=>$_POST['Money'],                        "Law"=>!empty($_POST['Law']) ? $_POST['Law'] : "",                        "UnLaw"=>!empty($_POST['UnLaw']) ? $_POST['UnLaw'] : "",                        "Month"=>$_POST['Month'],                        "Nature"=>$_POST['Nature'],                        "Status"=>$_POST['Status'],                        "Guaranty"=>!empty($_POST['Guaranty']) ? $_POST['Guaranty'] : "",                        "State"=>!empty($_POST['State']) ? $_POST['State'] : "",                        "Industry"=>!empty($_POST['Industry']) ? $_POST['Industry'] : "",                    ]);                    break;                    break;                case "19":                    $res=DB::table("T_P_SPEC19")->where("ProjectID",$_POST['id'])->update([                        "Identity"=>isset($_POST['Identity']) ? $_POST['Identity'] : "",                        "TotalMoney"=>$_POST['TotalMoney'],                        "Law"=>!empty($_POST['Law']) ? $_POST['Law'] : "",                        "UnLaw"=>!empty($_POST['UnLaw']) ? $_POST['UnLaw'] : "",                        "Month"=>$_POST['Month'],                        "DebteeLocation"=>$_POST['DebteeLocation'],                        "Guaranty"=>!empty($_POST['Guaranty']) ? $_POST['Guaranty'] : "",                        "Property"=>!empty($_POST['Property']) ? $_POST['Property'] : "",                        "Connect"=>!empty($_POST['Connect']) ? $_POST['Connect'] : "",                        "Pay"=>!empty($_POST['Pay']) ? $_POST['Pay'] : "",                        "Credentials"=>!empty($_POST['Credentials']) ? $_POST['Credentials'] : "",                    ]);                    break;                case "20":                    $res=DB::table("T_P_SPEC20")->where("ProjectID",$_POST['id'])->update([                        "AssetType"=>$_POST['AssetType'],                        "Area"=>$_POST['Area'],                        "Nature"=>$_POST['Nature'],                        "Money"=>$_POST['Money'],                        "Year"=>$_POST['Year'],                        "State"=>$_POST['State'],                        "Court"=>$_POST['Court'],                    ]);                    break;                case "21":                    $res=DB::table("T_P_SPEC21")->where("ProjectID",$_POST['id'])->update([                        "AssetType"=>$_POST['AssetType'],                        "Area"=>$_POST['Area'],                        "Nature"=>$_POST['Nature'],                        "Money"=>$_POST['Money'],                        "Year"=>$_POST['Year'],                        "State"=>$_POST['State'],                        "Court"=>$_POST['Court'],                    ]);                    break;                case "22":                    $res=DB::table("T_P_SPEC22")->where("ProjectID",$_POST['id'])->update([                        "AssetType"=>$_POST['AssetType'],                        "Brand"=>$_POST['Brand'],                        "Money"=>$_POST['Money'],                        "Year"=>$_POST['Year'],                        "State"=>$_POST['State'],                        "Court"=>$_POST['Court'],                    ]);                    break;            }        }        $remark = !empty($_POST['remark']) ? $_POST['remark'] : "";        $result = DB::table("T_P_PROJECTCERTIFY")->where("ProjectID", $_POST['id'])->update([            "State" => $_POST['state'],            "Remark" => $remark,            'updated_at' => date("Y-m-d H:i:s", time())        ]);        if ($db && $result) {            echo "<script>location.href='".session('url')."';</script>";        } else {            return Redirect::to("check/detail/" . $_POST['id']."/".$_POST['typeId']);        }    }    //服务方上传图片    public function upload()    {        $file = Input::file('Filedata');        $clientName = $file->getClientOriginalName();//获取文件名        $tmpName = $file->getFileName();//获取临时文件名        $realPath = $file->getRealPath();//缓存文件的绝对路径        $extension = $file->getClientOriginalExtension();//获取文件的后缀        $mimeType = $file->getMimeType();//文件类型        $newName = time() . mt_rand(1000, 9999) . '.' . $extension;//新文件名//       $path = $file->move(base_path().'/public/upload/images/',$newName);//移动绝对路径//       $filePath = '/upload/images/'.$newName;//存入数据库的相对路径        $path = $file->move(dirname(base_path()) . '/ziyaupload/images/checks/', $newName);//移动绝对路径        $filePath = '/checks/' . $newName;//存入数据库的相对路径        return $filePath;    }    //审核删除照片    public function handle()    {        $id = $_POST['id'];        $title = $_POST['title'];        $db = DB::table("T_P_PROJECTINFO")->where("ProjectID", $id)->update([            $title => "",            'updated_at' => date("Y-m-d H:i:s", time())        ]);        if ($db) {            $data = array("state" => 1);        } else {            $data = array("state" => 0);        }        return json_encode($data);    }    //处理上传的照片    public function editHandle()    {        $id = $_POST['id'];        $data = $_POST['data'];        $title = $_POST['title'];        $db = DB::table("T_P_PROJECTINFO")->where("ProjectID", $id)->update([            $title => $data,            'updated_at' => date("Y-m-d H:i:s", time())        ]);        if ($db) {            $res = array("state" => 1);        } else {            $res = array("state" => 0);        }        return json_encode($res);    }    //信息收藏的详情    public function collectDetail($projectId){        $projectId=$projectId;        $datas=DB::table("T_P_COLLECTION")               ->leftJoin("users","users.userid","=","T_P_COLLECTION.UserID")               ->leftJoin("T_U_SERVICEINFO","T_U_SERVICEINFO.UserID","=","T_P_COLLECTION.UserID")               ->select("users.userid","users.phonenumber","users.username","T_U_SERVICEINFO.ServiceName","T_U_SERVICEINFO.ServiceType","T_P_COLLECTION.*")               ->where("T_P_COLLECTION.Type",1)               ->where("ItemID",$projectId)               ->orderBy("CollectTime","desc")               ->paginate(20);        foreach($datas as $data){            $userId=$data->userid;            $results=DB::table("T_U_SERVICEINFO")->where('userid',$userId)->count();            $pubs=DB::table("T_P_PROJECTINFO")->where("userid",$userId)->count();            if($results>0){                $data->role=1;            }else if($pubs>0 && $results==0 ){                $data->role=2;            }else{                $data->role=0;            }            $serviceTypes = $data->ServiceType;            $serviceType = explode(",", $serviceTypes);            $types = DB::table("T_P_PROJECTTYPE")->select("TypeName")                ->whereIn("TypeID", $serviceType)                ->get();            $arr = array();            foreach ($types as $value) {                $arr[] = $value->TypeName;            }            $type = implode(",", $arr);            $data->ServiceType = $type;        }        return view("members/check/collectDetail",compact("datas"));    }    //信息浏览次数    public function viewDetail($projectId){        $projectId=$projectId;        $path = '/var/www/html/ziyaapi/storage/logs/data/check.log';        $fp = fopen($path, "r");        if ($fp) {            $contents = array();            for ($i = 1; !feof($fp); $i++) {                $content = unserialize(fgets($fp));                $contents[] = $content;            }        } else {            echo "打开文件失败";        }        fclose($fp);        file_put_contents($path,"");        foreach ($contents as $value) {            if ($value) {                $time = date("Y-m-d H:i:s", $value['time']);                $counts = DB::table("T_M_VIEW")->where(["UserID" => $value['userid'], "created_at" => $time])->count();                if (!$counts) {                    $inserts = DB::table("T_M_VIEW")->insert([                        "UserID" => $value['userid'],                        "Type"=>$value['type'],                        "ItemID"=>$value['itemid'],                        "IP" => $value['ip'],                        "created_at"=>$time                    ]);                }            }        }        $datas=DB::table("T_M_VIEW")                ->leftJoin("users","users.userid","=","T_M_VIEW.UserID")                ->leftJoin("T_U_SERVICEINFO","T_U_SERVICEINFO.UserID","=","T_M_VIEW.UserID")                ->select("users.phonenumber","users.username","T_U_SERVICEINFO.ServiceName","T_U_SERVICEINFO.ServiceType","T_M_VIEW.*")                ->where("T_M_VIEW.Type",1)                ->where("ItemID",$projectId)                ->orderBy("T_M_VIEW.created_at","desc")                ->paginate(20);        foreach($datas as $data){            $userId=$data->UserID;            if($userId){                $results=DB::table("T_U_SERVICEINFO")->where('userid',$userId)->count();                $pubs=DB::table("T_P_PROJECTINFO")->where("userid",$userId)->count();                if($results>0){                    $data->role=1;                }else if($pubs>0 && $results==0 ){                    $data->role=2;                }else{                    $data->role=0;                }            }else{                $data->role=3;            }                       $serviceTypes = $data->ServiceType;            $serviceType = explode(",", $serviceTypes);            $types = DB::table("T_P_PROJECTTYPE")->select("TypeName")                ->whereIn("TypeID", $serviceType)                ->get();            $arr = array();            foreach ($types as $value) {                $arr[] = $value->TypeName;            }            $type = implode(",", $arr);            $data->ServiceType = $type;        }        return view("members/check/viewDetail",compact("datas"));            }    }